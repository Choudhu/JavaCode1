import java.applet.* ;
import java.awt.* ;
import java.io.* ;
import java.util.* ;
//import java.lang.* ;
/**
 * Solves a sudoku puzzle by recursion and backtracking
 */
public class Hexadoku extends Applet implements Runnable
{
   /** The model */
   protected int model[][] ;
   
   
   /** The view */
   protected Button view[][] ;
   
   Color colorArray[] ;
   String line ;

   /** Creates the model and sets up the initial situation */
   protected void createModel()
   {
      model = new int[16][16] ;
            // Clear all cells
     

      for( int row = 0; row < 16; row++ )
         for( int col = 0; col < 16; col++ )
            model[row][col] = 0 ;
             //model
      BufferedReader reader = null;
      //creates the initial situation
      //a model for the Hexaduko 
      try
      {
      //File file = new File ("solution.txt");
      //Scanner sc = new Scanner (new FileInputStream(file));
     // String Str = "";
      reader = new BufferedReader(new FileReader("solution.txt"));
    String line = null;
    while ((line = reader.readLine()) != null)
     //while (sc.hasNextLine())
      
     {
       //Str = sc.nextLine();
     String arg[] = line.split(",");
       int x = Integer.parseInt(arg[0]);
       int y = Integer.parseInt(arg[1]);
       int value = Integer.parseInt(arg[2]);     
       model [x][y] = value;
 
     }
      }
      
     catch (FileNotFoundException e) 
     {
       e.printStackTrace();
     }
     catch (IOException e)
     {
     }
      }

        

   /** creates an array to change color for each cells and creates an empty view */
   protected void createView()
   {
     //array to change color for each cells
     colorArray = new Color[16];
     colorArray[0] = new Color (221,160,221) ;
     colorArray[1] = new Color (224,255,255) ;
     colorArray[2] = new Color (255,255,255) ;
     colorArray[3] = new Color (255,255,240) ;
     colorArray[4] = new Color (245,250,230) ;
     colorArray[5] = new Color (255,218,215) ;
     colorArray[6] = new Color (188,143,143) ;
     colorArray[7] = new Color (205,92,92) ;
     colorArray[8] = new Color (255,248,220) ;
     colorArray[9] = new Color (255,222,173) ;
     colorArray[10] = new Color (222,184,135) ;
     colorArray[11] = new Color (189,183,107) ;
     colorArray[12] = new Color (255,0,0) ;
     colorArray[13] = new Color (255,215,0) ;
     colorArray[14] = new Color (250,250,210) ;
     colorArray[15] = new Color  (0,150,150);
     
      setLayout( new GridLayout(16, 16) ) ;

      view = new Button[16][16] ;

      // Create an empty view
      for( int row = 0; row < 16; row++ )
         for( int col = 0; col < 16; col++ )
         {
            view[row][col]  = new Button() ;
            add( view[row][col] ) ;
         }
   }

   /** Updates the view from the model */
   protected void updateView()
   {
      for( int row = 0; row < 16; row++ )
         for( int col = 0; col < 16; col++ )
            if( model[row][col] != 0 )
      {
        view[row][col].setLabel( String.valueOf(model[row][col]));
        
        //change color for each cells
        view[row][col].setBackground(colorArray[model[row][col]-1]);
      }
   }
      

   /* This method is called by the browser when the applet is loaded */
   public void init()
   {
     
      createModel() ;
      createView() ;
      updateView() ;
   }

   /** Checks if num is an acceptable value for the given row */
   protected boolean checkRow( int row, int num )
   {
      for( int col = 0; col < 16; col++ )
         if( model[row][col] == num )
            return false ;

      return true ;
   }

   /** Checks if num is an acceptable value for the given column */
   protected boolean checkCol( int col, int num )
   {
      for( int row = 0; row < 16; row++ )
         if( model[row][col] == num )
            return false ;

      return true ;
   }

   /** Checks if num is an acceptable value for the box around row and col */
   protected boolean checkBox( int row, int col, int num )
   {
      row = (row / 4) * 4 ;
      col = (col / 4) * 4 ;

      for( int r = 0; r < 4; r++ )
         for( int c = 0; c < 4; c++ )
         if( model[row+r][col+c] == num )
            return false ;

      return true ;
   }

   /** This method is called by the browser to start the applet */
   public void start()
   {
      // This statement will start the method 'run' to in a new thread
      (new Thread(this)).start() ;
   }

   /** The active part begins here */
   public void run()
   {
      try
      {
         // Let the observers see the initial position
         Thread.sleep( 1000 ) ;

         // Start to solve the puzzle in the left upper corner
         solve( 0, 0 ) ;
      }
      catch( Exception e )
      {
      }
   }

   /** Recursive function to find a valid number for one single cell */
   public void solve( int row, int col ) throws Exception
   {
      // Throw an exception to stop the process if the puzzle is solved
      if( row > 15 )
         throw new Exception( "Solution found" ) ;

      // If the cell is not empty, continue with the next cell
      if( model[row][col] != 0 )
         next( row, col ) ;
      else
      {
        
         // Find a valid number for the empty cell
         for( int num = 1; num < 17; num++ )
         {
            if( checkRow(row,num) && checkCol(col,num) && checkBox(row,col,num) )
            {
               model[row][col] = num ;
               updateView() ;

               // Let the observer see it
               
           
               Thread.sleep( 1000 ) ;

               // Delegate work on the next cell to a recursive call
               next( row, col ) ;
            }
         }

         // No valid number was found, clean up and return to caller
         model[row][col] = 0 ;
         updateView() ;
      }
   }

   /** Calls solve for the next cell */
   public void next( int row, int col ) throws Exception
   {
      if( row < 15 )
         solve( row + 1, col ) ;
      else
         solve( 0, col + 1 ) ;
   }
}